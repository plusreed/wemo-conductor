{"version":3,"file":"static/js/972.019c769a.chunk.js","mappings":"2NAOA,SAASA,EAAiBC,GACtB,IAAMC,GAAgBC,EAAAA,EAAAA,UAAgB,WAClC,OAAIF,EAAMG,KAAa,QAEhB,QACR,CAACH,EAAMG,OAEV,OACI,SAAC,KAAD,CAAOC,QAAS,QAASC,SAAU,KAAMC,YAAaL,EAAeM,UAAW,SAAhF,SACMP,EAAMG,KAAO,KAAO,QAKlC,OAAeK,EAAAA,EAAAA,MAAKT,G,UClBL,SAASU,IACpB,OACI,UAAC,KAAD,CAAOC,OAAQ,QAAf,WACI,SAAC,KAAD,KACA,SAAC,KAAD,sCCMZ,IAAMC,EAAaC,EAAAA,MAAW,kBAAM,iCAQpC,SAASC,EAAab,GAClB,OAAmCc,EAAAA,EAAAA,IAC/B,CAAEC,GAAIf,EAAMe,GAAIC,KAAMhB,EAAMgB,MAC5B,CAAEC,gBAAiB,MAFfC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,UAAWC,EAA1B,EAA0BA,KAK1B,OACI,UAAC,KAAD,CAAKC,GAAI,WAAYC,EAAG,EAAGC,QAAS,EAApC,UACML,IAAS,SAACT,EAAD,IACTU,IACE,SAAC,KAAD,WACI,SAACK,EAAA,EAAD,CAA+BC,MAAO,eAG5B,mBAATL,IACL,iCACI,UAAC,KAAD,YACI,SAAC,KAAD,CAAMM,aAAW,EAACrB,SAAU,KAAMsB,WAAY,OAA9C,SACK3B,EAAM4B,QAEX,SAAC,KAAD,KACA,SAAC,EAAD,CAAiBzB,KAAMiB,QAE3B,SAAC,EAAAS,SAAD,CAAUC,UAAU,SAACN,EAAA,EAAD,CAA+BC,MAAO,aAA1D,UACI,SAACd,EAAD,CAAYI,GAAIf,EAAMe,GAAIC,KAAMhB,EAAMgB,KAAMe,aAAcX,YASlF,MAAeR,EAAAA,KAAWC","sources":["components/presentation/WemoBinaryBadge.tsx","components/presentation/WemoFetchError.tsx","components/WemoControl.tsx"],"sourcesContent":["import React, { memo, useMemo } from 'react'\nimport { Badge } from '@chakra-ui/react'\n\ntype WemoBinaryBadgeProps = {\n    isOn: boolean\n}\n\nfunction WemoBinaryBadge (props: WemoBinaryBadgeProps) {\n    const memoizedColor = useMemo<string>(() => {\n        if (props.isOn) return 'green'\n\n        return 'red'\n    }, [props.isOn])\n\n    return (\n        <Badge variant={'solid'} fontSize={'md'} colorScheme={memoizedColor} alignSelf={'center'}>\n            { props.isOn ? 'On' : 'Off'}\n        </Badge>\n    )\n}\n\nexport default memo(WemoBinaryBadge)","import React from 'react'\nimport { Alert, AlertIcon, AlertTitle } from '@chakra-ui/react'\n\nexport default function WemoFetchError () {\n    return (\n        <Alert status={'error'}>\n            <AlertIcon />\n            <AlertTitle>Error getting state!</AlertTitle>\n        </Alert>\n    )\n}","import React, { Suspense } from 'react'\nimport { useGetWemoStateQuery } from \"../store/services/conductorApi\";\nimport {\n    Box,\n    Center,\n    Flex,\n    Spacer,\n    Text\n} from \"@chakra-ui/react\";\nimport IndeterminateCircularProgress from './presentation/IndeterminateCircularProgress'\nimport WemoBinaryBadge from './presentation/WemoBinaryBadge';\nimport WemoFetchError from './presentation/WemoFetchError';\n\nconst WemoToggle = React.lazy(() => import('./WemoToggle'))\n\ntype WemoControlProps = {\n    ip: string,\n    port: number,\n    name: string\n}\n\nfunction WemoControl (props: WemoControlProps) {\n    const { error, isLoading, data } = useGetWemoStateQuery(\n        { ip: props.ip, port: props.port },\n        { pollingInterval: 10000 }\n    )\n\n    return (\n        <Box bg={'gray.100'} p={4} rounded={4}>\n            { error && <WemoFetchError /> }\n            { isLoading && (\n                <Center>\n                    <IndeterminateCircularProgress color={'gray.700'} />\n                </Center>\n            )}\n            { typeof data === 'boolean' && (\n                <>\n                    <Flex>\n                        <Text isTruncated fontSize={'lg'} fontWeight={'bold'}>\n                            {props.name}\n                        </Text>\n                        <Spacer />\n                        <WemoBinaryBadge isOn={data} />\n                    </Flex>\n                    <Suspense fallback={<IndeterminateCircularProgress color={'gray.700'} />}>\n                        <WemoToggle ip={props.ip} port={props.port} currentState={data} />\n                    </Suspense>\n                </>\n\n            )}\n        </Box>\n    )\n}\n\nexport default React.memo(WemoControl)"],"names":["WemoBinaryBadge","props","memoizedColor","useMemo","isOn","variant","fontSize","colorScheme","alignSelf","memo","WemoFetchError","status","WemoToggle","React","WemoControl","useGetWemoStateQuery","ip","port","pollingInterval","error","isLoading","data","bg","p","rounded","IndeterminateCircularProgress","color","isTruncated","fontWeight","name","Suspense","fallback","currentState"],"sourceRoot":""}